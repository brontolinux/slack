package slack

// Auto-generated by internal/cmd/genmethods/genmethods.go. DO NOT EDIT!

import (
	"context"
	"net/url"
	"strconv"
	"strings"

	"github.com/brontolinux/slack/objects"
	"github.com/pkg/errors"
)

var _ = strconv.Itoa
var _ = strings.Index
var _ = objects.EpochTime(0)

// UsersAdminSetInactiveCall is created by UsersAdminService.SetInactive method call
type UsersAdminSetInactiveCall struct {
	service *UsersAdminService
	user    string
}

// SetInactive creates a UsersAdminSetInactiveCall object in preparation for accessing the users.admin.setInactive endpoint
func (s *UsersAdminService) SetInactive(user string) *UsersAdminSetInactiveCall {
	var call UsersAdminSetInactiveCall
	call.service = s
	call.user = user
	return &call
}

// ValidateArgs checks that all required fields are set in the UsersAdminSetInactiveCall object
func (c *UsersAdminSetInactiveCall) ValidateArgs() error {
	if len(c.user) <= 0 {
		return errors.New(`required field user not initialized`)
	}
	return nil
}

// Values returns the UsersAdminSetInactiveCall object as url.Values
func (c *UsersAdminSetInactiveCall) Values() (url.Values, error) {
	if err := c.ValidateArgs(); err != nil {
		return nil, errors.Wrap(err, `failed validation`)
	}
	v := url.Values{}
	v.Set(`token`, c.service.token)

	v.Set("user", c.user)
	return v, nil
}

// Do executes the call to access users.admin.setInactive endpoint
func (c *UsersAdminSetInactiveCall) Do(ctx context.Context) error {
	const endpoint = "users.admin.setInactive"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		objects.GenericResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to users.admin.setInactive`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// FromValues parses the data in v and populates `c`
func (c *UsersAdminSetInactiveCall) FromValues(v url.Values) error {
	var tmp UsersAdminSetInactiveCall
	if raw := strings.TrimSpace(v.Get("user")); len(raw) > 0 {
		tmp.user = raw
	}
	*c = tmp
	return nil
}
